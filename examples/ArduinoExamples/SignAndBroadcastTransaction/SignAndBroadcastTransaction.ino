#include <MicroSui.h>

// WiFi Credentials Configuration
const char* wifi_ssid = "iPhone";
const char* wifi_pass = "123456789";

// Sui RPC Node URL
const char* rpc_url = "https://fullnode.testnet.sui.io:443/"; // Sui Testnet fullnode RPC URL
// Private key in Bech32 format
const char* sui_private_key_bech32 = "suiprivkey1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq509duq"; // Example private key in Bech32 format
// Hardcoded transaction bytes (previously generated by Sui Typescript SDK) 
const char* message_string = "000002000800e1f5050000000000202e3d52393c9035afd1ef38abd7fce2dad71f0e276b522fb274f4e14d1df9747202020001010000010103000000000101007a1378aafadef8ce743b72e8b248295c8f61c102c94040161146ea4d51a182b6012901f275336715aa2d266fcdc57b3733fca4b135637160d6364acf4b7874590d0d0bd0140000000020a17f8121673e79df6e2070474050a4a4e3b51dee9887b90d87eafae9af4606257a1378aafadef8ce743b72e8b248295c8f61c102c94040161146ea4d51a182b6e80300000000000040ab3c000000000000";

void setup() {
  Serial.begin(9600);
  pinMode(LED_BUILTIN, OUTPUT);

  delay(1000);

  Serial.println("\n\t\t\t --- MicroSui ESP32 - Sign and Broadcast Transaction to the Sui Network ---\n");

  // WiFi connect
  MicroSuiWiFi wifi = WiFi_connect(wifi_ssid, wifi_pass);
  
  // Create a client connected to the Sui mainnet fullnode
  MicroSuiClient client = SuiClient_newClient(rpc_url);

  // Create a keypair from a given secret key in Bech32 format
  MicroSuiEd25519 keypair = SuiKeypair_fromSecretKey(sui_private_key_bech32);

  // Initialize a MicroSuiTransaction object from setHarcodedTxBytes(...) constructor
  MicroSuiTransaction tx = SuiTransaction_setHarcodedTxBytes(message_string);

  // Using method1 of the client: signAndExecuteTransaction (Simpler, creates the signature internally)
  SuiTransactionBlockResponse res1 = client.signAndExecuteTransaction(&client, keypair, tx);

  Serial.printf("           First call (signAndExecuteTransaction function):");
  Serial.print("   Tx Digest= "); Serial.println(res1.digest);
  Serial.print("   Tx Checkpoint= "); Serial.println(res1.checkpoint);
  Serial.print("   Tx confirmedLocalExecution= "); Serial.println(res1.confirmedLocalExecution);

  Serial.print("        Balance Changes: "); Serial.println(res1.balanceChanges_len);

  for (int i = 0; i < res1.balanceChanges_len; i++)
  {
    Serial.print("     Balance Changes Coin "); Serial.print(i+1); Serial.println(":");
    Serial.print("   balanceChanges["); Serial.print(i); Serial.print("].amount= "); Serial.println(res1.balanceChanges[i].amount);
    Serial.print("   balanceChanges["); Serial.print(i); Serial.print("].coinType= "); Serial.println(res1.balanceChanges[i].coinType);
    Serial.print("   balanceChanges["); Serial.print(i); Serial.print("].owner= "); Serial.println(res1.balanceChanges[i].owner);
  }

  // Generate signature for use it in
  SuiSignature sig = keypair.signTransaction(&keypair, message_string);

  // Using method2 of the client: executeTransactionBlock (More customizable, needs the signature as parameter)
  SuiTransactionBlockResponse res2 = client.executeTransactionBlock(&client, tx.tx_bytes, sig);
  
  Serial.print("           Second call (executeTransactionBlock function) - Digest= "); Serial.println(res2.digest);

  wifi.disconnect(&wifi);
}

void loop() {
  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
  delay(700);                      // wait for a second
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
  delay(700);                      // wait for a second
}